version: '3.8'  # Compose file format version

# Common configuration block reused by all Airflow services
x-airflow-common: &airflow-common
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.8.0}  # Default Airflow image
  environment: &airflow-common-env
    # Executor configuration: using CeleryExecutor for distributed execution
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    # SQL connection for Airflow metadata DB (MySQL)
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: mysql+mysqlconnector://weather_user:weather_pass@mysql/weather_db
    # Celery result backend (also using MySQL)
    AIRFLOW__CELERY__RESULT_BACKEND: db+mysql://weather_user:weather_pass@mysql/weather_db
    # Redis as the message broker for Celery
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    # Fernet key for encrypting secrets (empty here for simplicity)
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'  # Disable example DAGs
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    _PIP_ADDITIONAL_REQUIREMENTS: "mysql-connector-python"  # Ensure MySQL connector is available
  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags        # DAGs directory
    - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs        # Logs directory
    - ${AIRFLOW_PROJ_DIR:-.}/config:/opt/airflow/config    # Optional config files
    - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins  # Custom plugins
  user: "${AIRFLOW_UID:-50000}:0"  # Run Airflow as specific user
  depends_on: &airflow-common-depends-on
    redis:
      condition: service_healthy
    mysql:
      condition: service_healthy

services:

  # MySQL database for Airflow metadata and Celery backend
  mysql:
    image: mysql:8
    container_name: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: weather_db
      MYSQL_USER: weather_user
      MYSQL_PASSWORD: weather_pass
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql  # Persistent volume
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-proot"]
      interval: 10s
      retries: 5
      start_period: 30s

  # Redis for Celery message brokering
  redis:
    image: redis:latest
    restart: always
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s

  # Airflow web interface
  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"  # Access Airflow UI at localhost:8080
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  # Scheduler for triggering tasks
  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  # Celery worker for executing tasks
  airflow-worker:
    <<: *airflow-common
    command: celery worker
    environment:
      <<: *airflow-common-env
      DUMB_INIT_SETSID: "0"
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  # Triggerer for async DAGs (e.g., sensors)
  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  # Initialization service for DB setup and admin user creation
  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        # Warning for missing UID
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "You should define AIRFLOW_UID to avoid permission issues."
        fi
        # Environment checks
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        if (( mem_available < 4000 )); then
          echo -e "\033[1;33mWARNING!!!: Not enough memory. Minimum 4GB recommended.\e[0m"
        fi
        if (( cpus_available < 2 )); then
          echo -e "\033[1;33mWARNING!!!: Not enough CPUs. Minimum 2 CPUs recommended.\e[0m"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo -e "\033[1;33mWARNING!!!: Low disk space. At least 10 GB recommended.\e[0m"
        fi
        # Migrate DB schema and create default admin user
        airflow db migrate
        airflow users create \
          --username "${_AIRFLOW_WWW_USER_USERNAME:-airflow}" \
          --password "${_AIRFLOW_WWW_USER_PASSWORD:-airflow}" \
          --firstname Admin \
          --lastname User \
          --role Admin \
          --email admin@example.com

# Named volume for persistent MySQL storage
volumes:
  mysql_data:
